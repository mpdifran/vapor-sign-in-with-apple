//
//  AppleTokenRequest.swift
//  
//
//  Created by Mark DiFranco on 2021-02-07.
//

import Foundation
import Vapor

/// The request to send to Apple's servers in order to generate or validate tokens.
/// - note: [Generate and Validate Tokens Documentation](https://developer.apple.com/documentation/sign_in_with_apple/generate_and_validate_tokens)
struct AppleTokenRequest: Codable, Equatable, Content, Sendable {
    enum GrantType: String, Codable {
        case authorizationCode = "authorization_code"
        case refreshToken = "refresh_token"
    }

    /// The identifier (App ID or Services ID) for your app. The identifier must not include your Team ID,
    /// to help mitigate the possiblity of exposing sensitive data to the end user. Authorization code and
    /// refresh token validation requests require this parameter.
    let clientId: String

    /// A secret JSON Web Token, generated by the developer, that uses the Sign in with Apple private key
    /// associated with your developer account. Authorization code and refresh token validation requests require
    /// this parameter.
    let clientSecret: String

    /// The authorization code received in an authorization response sent to your app. The code is single-use only
    /// and valid for five minutes. Authorization code validation requests require this parameter.
    let code: String?

    /// The grant type determines how the client app interacts with the validation server. Authorization code and
    /// refresh token validation requests require this parameter. For authorization code validation, use
    /// `.authorizationCode`. For refresh token validation requests, use `.refreshToken`.
    let grantType: GrantType

    /// The refresh token received from the validation server during a authorization request. Refresh token
    /// validation requests require this parameter.
    let refreshToken: String?

    /// The destination URI provided in the authorization request when authorizing a user with your app, if
    /// applicable. The URI must use the HTTPS protocol, include a domain name, and cannot contain an IP address or
    /// localhost. Authorization code requests require this parameter.
    let redirectUri: URL?

    /// Initializer for an authorization code validation request.
    ///
    /// - parameter clientId: You app's Bundle ID or your registered Service ID.
    /// - parameter clientSecret: A secret JSON Web Token, generated by the developer, that uses the Sign in with Apple
    /// private key associated with your developer account.
    /// - parameter code: The authorizationCode you received from the client.
    /// - parameter redirectUri: The destination URI provided in the authorization request when authorizing a user with
    /// your app, if applicable.
    init(clientId: String, clientSecret: String, code: String, redirectUri: URL? = nil) {
        self.clientId = clientId
        self.clientSecret = clientSecret
        self.code = code
        self.grantType = .authorizationCode
        self.refreshToken = nil
        self.redirectUri = redirectUri
    }

    /// Initializer for a refresh token validation request.
    ///
    /// - parameter clientId: You app's Bundle ID or your registered Service ID.
    /// - parameter clientSecret: A secret JSON Web Token, generated by the developer, that uses the Sign in with Apple
    /// private key associated with your developer account.
    /// - parameter refreshToken: The refresh token received from the validation server during a authorization request.
    init(clientId: String, clientSecret: String, refreshToken: String) {
        self.clientId = clientId
        self.clientSecret = clientSecret
        self.code = nil
        self.grantType = .refreshToken
        self.refreshToken = refreshToken
        self.redirectUri = nil
    }

    private enum CodingKeys: String, CodingKey {
        case clientId = "client_id"
        case clientSecret = "client_secret"
        case code
        case grantType = "grant_type"
        case refreshToken = "refresh_token"
        case redirectUri = "redirect_uri"
    }
}
